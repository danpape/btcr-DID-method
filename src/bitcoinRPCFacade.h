#ifndef TXREF_BITCOINRPCFACADE_H
#define TXREF_BITCOINRPCFACADE_H

// Facade class that wraps the BitcoinApi objects

#include <string>
#include <vector>
#include <map>

// forward decls from bitcoinaapi
class BitcoinAPI;
struct getrawtransaction_t;
struct blockinfo_t;
struct utxoinfo_t;
struct txout_t;

// struct for local impl of getblockchaininfo()
struct blockchaininfo_t {
    std::string chain;
    int blocks;
    int headers;
    std::string bestblockhash;
    double difficulty;
    int mediantime;
    double verificationprogress;
    std::string chainwork;
    bool pruned;
    int pruneheight;
    //std::vector<...> softforks;
    //std::vector<...> bip9_softforks;
};

// struct for local impl of signrawtxin_t
struct signrawtxinext_t {
    std::string txid;
    unsigned int n;
    std::string scriptPubKey;
    std::string redeemScript;
    std::string amount;
};

// struct for local impl of getaddressinfo()
struct btcaddressinfo_t { // not using addressinfo_t as that is already used in BitcoinApi

    std::string address; // The bitcoin address validated
    std::string scriptPubKey; // The hex-encoded scriptPubKey generated by the address
    bool ismine; // If the address is yours or not
    bool iswatchonly; // If the address is watchonly
    bool solvable; // Whether we know how to spend coins sent to this address, ignoring the possible lack of private keys
    std::string desc; // A descriptor for spending coins sent to this address (only when solvable)
    bool isscript; // If the key is a script
    bool ischange; // If the address was used for change output
    bool iswitness; // If the address is a witness address
    int witness_version; // The version number of the witness program
    std::string witness_program; // The hex value of the witness program
    std::string script; // The output script type. Only if "isscript" is true and the redeemscript is known. Possible types: nonstandard, pubkey, pubkeyhash, scripthash, multisig, nulldata, witness_v0_keyhash, witness_v0_scripthash, witness_unknown
    std::string hex; // The redeemscript for the p2sh address
    std::vector<std::string> pubkeys; // Array of pubkeys associated with the known redeemscript (only if "script" is "multisig")
    int sigsrequired; // Number of signatures required to spend multisig output (only if "script" is "multisig")
    std::string pubkey; // The hex value of the raw public key, for single-key addresses (possibly embedded in P2SH or P2WSH)
// object embedded; // {...},           (object, optional) Information about the address embedded in P2SH or P2WSH, if relevant and known. It includes all getaddressinfo output fields for the embedded address, excluding metadata ("timestamp", "hdkeypath", "hdseedid") and relation to the wallet ("ismine", "iswatchonly").
    bool iscompressed; // If the pubkey is compressed
    std::string label; // The label associated with the address, "" is the default label
    int timestamp; // The creation time of the key if available in seconds since epoch (Jan 1 1970 GMT)
    std::string hdkeypath; // The HD keypath if the key is HD and available
    std::string hdseedid; // The Hash160 of the HD seed
    std::string hdmasterfingerprint; // The fingperint of the master key.
    std::vector<std::string> labels; // Array of labels associated with the address.

};

struct RpcConfig {
    std::string rpcuser = "";
    std::string rpcpassword ="";
    std::string rpchost = "127.0.0.1";
    int rpcport = 0;
};

class BitcoinRPCFacade {

private:
    BitcoinAPI *bitcoinAPI;

public:

    // constructor will throw if an RPC connection can't be made to the bitcoind
    explicit BitcoinRPCFacade(
            const RpcConfig & config);

    virtual ~BitcoinRPCFacade();

    // forwards to existing bitcoinapi functions
    virtual getrawtransaction_t getrawtransaction(const std::string& txid, int verbose) const;
    virtual blockinfo_t getblock(const std::string& blockhash) const;
    virtual std::string getblockhash(int blocknumber) const;
    virtual utxoinfo_t gettxout(const std::string& txid, int n) const;

    virtual std::string createrawtransaction(const std::vector<txout_t>& inputs, const std::map<std::string, double>& amounts) const;
    virtual std::string createrawtransaction(const std::vector<txout_t>& inputs, const std::map<std::string, std::string>& amounts) const;

    // implement missing bitcoinapi functions
    virtual blockchaininfo_t getblockchaininfo() const;
    virtual std::string signrawtransactionwithkey(const std::string& rawTx, const std::vector<signrawtxinext_t> & inputs, const std::vector<std::string>& privkeys, const std::string& sighashtype) const;
    virtual btcaddressinfo_t getaddressinfo(const std::string& address) const;

    // re-implement out-of-date bitcoinapi functions
    virtual std::string sendrawtransaction(const std::string& hexString) const;

protected:
    BitcoinRPCFacade() = default;
};


#endif //TXREF_BITCOINRPCFACADE_H
